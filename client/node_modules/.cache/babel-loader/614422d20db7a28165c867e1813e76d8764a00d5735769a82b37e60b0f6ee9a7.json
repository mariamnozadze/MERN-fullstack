{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isIP;\nvar _assertString = require('./util/assertString');\nvar _assertString2 = _interopRequireDefault(_assertString);\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar ipv4Maybe = /^(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})$/;\nvar ipv6Block = /^[0-9A-F]{1,4}$/i;\nfunction isIP(str) {\n  var version = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  (0, _assertString2.default)(str);\n  version = String(version);\n  if (!version) {\n    return isIP(str, 4) || isIP(str, 6);\n  } else if (version === '4') {\n    if (!ipv4Maybe.test(str)) {\n      return false;\n    }\n    var parts = str.split('.').sort(function (a, b) {\n      return a - b;\n    });\n    return parts[3] <= 255;\n  } else if (version === '6') {\n    var blocks = str.split(':');\n    var foundOmissionBlock = false; // marker to indicate ::\n\n    // At least some OS accept the last 32 bits of an IPv6 address\n    // (i.e. 2 of the blocks) in IPv4 notation, and RFC 3493 says\n    // that '::ffff:a.b.c.d' is valid for IPv4-mapped IPv6 addresses,\n    // and '::a.b.c.d' is deprecated, but also valid.\n    var foundIPv4TransitionBlock = isIP(blocks[blocks.length - 1], 4);\n    var expectedNumberOfBlocks = foundIPv4TransitionBlock ? 7 : 8;\n    if (blocks.length > expectedNumberOfBlocks) {\n      return false;\n    }\n    // initial or final ::\n    if (str === '::') {\n      return true;\n    } else if (str.substr(0, 2) === '::') {\n      blocks.shift();\n      blocks.shift();\n      foundOmissionBlock = true;\n    } else if (str.substr(str.length - 2) === '::') {\n      blocks.pop();\n      blocks.pop();\n      foundOmissionBlock = true;\n    }\n    for (var i = 0; i < blocks.length; ++i) {\n      // test for a :: which can not be at the string start/end\n      // since those cases have been handled above\n      if (blocks[i] === '' && i > 0 && i < blocks.length - 1) {\n        if (foundOmissionBlock) {\n          return false; // multiple :: in address\n        }\n\n        foundOmissionBlock = true;\n      } else if (foundIPv4TransitionBlock && i === blocks.length - 1) {\n        // it has been checked before that the last\n        // block is a valid IPv4 address\n      } else if (!ipv6Block.test(blocks[i])) {\n        return false;\n      }\n    }\n    if (foundOmissionBlock) {\n      return blocks.length >= 1;\n    }\n    return blocks.length === expectedNumberOfBlocks;\n  }\n  return false;\n}\nmodule.exports = exports['default'];","map":{"version":3,"names":["Object","defineProperty","exports","value","default","isIP","_assertString","require","_assertString2","_interopRequireDefault","obj","__esModule","ipv4Maybe","ipv6Block","str","version","arguments","length","undefined","String","test","parts","split","sort","a","b","blocks","foundOmissionBlock","foundIPv4TransitionBlock","expectedNumberOfBlocks","substr","shift","pop","i","module"],"sources":["D:/projects/React Projects/mern-fullstack/node_modules/validator/lib/isIP.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isIP;\n\nvar _assertString = require('./util/assertString');\n\nvar _assertString2 = _interopRequireDefault(_assertString);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar ipv4Maybe = /^(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})$/;\nvar ipv6Block = /^[0-9A-F]{1,4}$/i;\n\nfunction isIP(str) {\n  var version = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n\n  (0, _assertString2.default)(str);\n  version = String(version);\n  if (!version) {\n    return isIP(str, 4) || isIP(str, 6);\n  } else if (version === '4') {\n    if (!ipv4Maybe.test(str)) {\n      return false;\n    }\n    var parts = str.split('.').sort(function (a, b) {\n      return a - b;\n    });\n    return parts[3] <= 255;\n  } else if (version === '6') {\n    var blocks = str.split(':');\n    var foundOmissionBlock = false; // marker to indicate ::\n\n    // At least some OS accept the last 32 bits of an IPv6 address\n    // (i.e. 2 of the blocks) in IPv4 notation, and RFC 3493 says\n    // that '::ffff:a.b.c.d' is valid for IPv4-mapped IPv6 addresses,\n    // and '::a.b.c.d' is deprecated, but also valid.\n    var foundIPv4TransitionBlock = isIP(blocks[blocks.length - 1], 4);\n    var expectedNumberOfBlocks = foundIPv4TransitionBlock ? 7 : 8;\n\n    if (blocks.length > expectedNumberOfBlocks) {\n      return false;\n    }\n    // initial or final ::\n    if (str === '::') {\n      return true;\n    } else if (str.substr(0, 2) === '::') {\n      blocks.shift();\n      blocks.shift();\n      foundOmissionBlock = true;\n    } else if (str.substr(str.length - 2) === '::') {\n      blocks.pop();\n      blocks.pop();\n      foundOmissionBlock = true;\n    }\n\n    for (var i = 0; i < blocks.length; ++i) {\n      // test for a :: which can not be at the string start/end\n      // since those cases have been handled above\n      if (blocks[i] === '' && i > 0 && i < blocks.length - 1) {\n        if (foundOmissionBlock) {\n          return false; // multiple :: in address\n        }\n        foundOmissionBlock = true;\n      } else if (foundIPv4TransitionBlock && i === blocks.length - 1) {\n        // it has been checked before that the last\n        // block is a valid IPv4 address\n      } else if (!ipv6Block.test(blocks[i])) {\n        return false;\n      }\n    }\n    if (foundOmissionBlock) {\n      return blocks.length >= 1;\n    }\n    return blocks.length === expectedNumberOfBlocks;\n  }\n  return false;\n}\nmodule.exports = exports['default'];"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}