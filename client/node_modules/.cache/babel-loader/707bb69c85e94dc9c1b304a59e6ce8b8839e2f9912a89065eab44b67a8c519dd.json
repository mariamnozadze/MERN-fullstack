{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isCurrency;\nvar _merge = require('./util/merge');\nvar _merge2 = _interopRequireDefault(_merge);\nvar _assertString = require('./util/assertString');\nvar _assertString2 = _interopRequireDefault(_assertString);\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction currencyRegex(options) {\n  var decimal_digits = '\\\\d{' + options.digits_after_decimal[0] + '}';\n  options.digits_after_decimal.forEach(function (digit, index) {\n    if (index !== 0) decimal_digits = decimal_digits + '|\\\\d{' + digit + '}';\n  });\n  var symbol = '(\\\\' + options.symbol.replace(/\\./g, '\\\\.') + ')' + (options.require_symbol ? '' : '?'),\n    negative = '-?',\n    whole_dollar_amount_without_sep = '[1-9]\\\\d*',\n    whole_dollar_amount_with_sep = '[1-9]\\\\d{0,2}(\\\\' + options.thousands_separator + '\\\\d{3})*',\n    valid_whole_dollar_amounts = ['0', whole_dollar_amount_without_sep, whole_dollar_amount_with_sep],\n    whole_dollar_amount = '(' + valid_whole_dollar_amounts.join('|') + ')?',\n    decimal_amount = '(\\\\' + options.decimal_separator + '(' + decimal_digits + '))' + (options.require_decimal ? '' : '?');\n  var pattern = whole_dollar_amount + (options.allow_decimal || options.require_decimal ? decimal_amount : '');\n\n  // default is negative sign before symbol, but there are two other options (besides parens)\n  if (options.allow_negatives && !options.parens_for_negatives) {\n    if (options.negative_sign_after_digits) {\n      pattern += negative;\n    } else if (options.negative_sign_before_digits) {\n      pattern = negative + pattern;\n    }\n  }\n\n  // South African Rand, for example, uses R 123 (space) and R-123 (no space)\n  if (options.allow_negative_sign_placeholder) {\n    pattern = '( (?!\\\\-))?' + pattern;\n  } else if (options.allow_space_after_symbol) {\n    pattern = ' ?' + pattern;\n  } else if (options.allow_space_after_digits) {\n    pattern += '( (?!$))?';\n  }\n  if (options.symbol_after_digits) {\n    pattern += symbol;\n  } else {\n    pattern = symbol + pattern;\n  }\n  if (options.allow_negatives) {\n    if (options.parens_for_negatives) {\n      pattern = '(\\\\(' + pattern + '\\\\)|' + pattern + ')';\n    } else if (!(options.negative_sign_before_digits || options.negative_sign_after_digits)) {\n      pattern = negative + pattern;\n    }\n  }\n\n  // ensure there's a dollar and/or decimal amount, and that\n  // it doesn't start with a space or a negative sign followed by a space\n  return new RegExp('^(?!-? )(?=.*\\\\d)' + pattern + '$');\n}\nvar default_currency_options = {\n  symbol: '$',\n  require_symbol: false,\n  allow_space_after_symbol: false,\n  symbol_after_digits: false,\n  allow_negatives: true,\n  parens_for_negatives: false,\n  negative_sign_before_digits: false,\n  negative_sign_after_digits: false,\n  allow_negative_sign_placeholder: false,\n  thousands_separator: ',',\n  decimal_separator: '.',\n  allow_decimal: true,\n  require_decimal: false,\n  digits_after_decimal: [2],\n  allow_space_after_digits: false\n};\nfunction isCurrency(str, options) {\n  (0, _assertString2.default)(str);\n  options = (0, _merge2.default)(options, default_currency_options);\n  return currencyRegex(options).test(str);\n}\nmodule.exports = exports['default'];","map":{"version":3,"names":["Object","defineProperty","exports","value","default","isCurrency","_merge","require","_merge2","_interopRequireDefault","_assertString","_assertString2","obj","__esModule","currencyRegex","options","decimal_digits","digits_after_decimal","forEach","digit","index","symbol","replace","require_symbol","negative","whole_dollar_amount_without_sep","whole_dollar_amount_with_sep","thousands_separator","valid_whole_dollar_amounts","whole_dollar_amount","join","decimal_amount","decimal_separator","require_decimal","pattern","allow_decimal","allow_negatives","parens_for_negatives","negative_sign_after_digits","negative_sign_before_digits","allow_negative_sign_placeholder","allow_space_after_symbol","allow_space_after_digits","symbol_after_digits","RegExp","default_currency_options","str","test","module"],"sources":["D:/projects/React Projects/mern-fullstack/node_modules/validator/lib/isCurrency.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isCurrency;\n\nvar _merge = require('./util/merge');\n\nvar _merge2 = _interopRequireDefault(_merge);\n\nvar _assertString = require('./util/assertString');\n\nvar _assertString2 = _interopRequireDefault(_assertString);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction currencyRegex(options) {\n  var decimal_digits = '\\\\d{' + options.digits_after_decimal[0] + '}';\n  options.digits_after_decimal.forEach(function (digit, index) {\n    if (index !== 0) decimal_digits = decimal_digits + '|\\\\d{' + digit + '}';\n  });\n  var symbol = '(\\\\' + options.symbol.replace(/\\./g, '\\\\.') + ')' + (options.require_symbol ? '' : '?'),\n      negative = '-?',\n      whole_dollar_amount_without_sep = '[1-9]\\\\d*',\n      whole_dollar_amount_with_sep = '[1-9]\\\\d{0,2}(\\\\' + options.thousands_separator + '\\\\d{3})*',\n      valid_whole_dollar_amounts = ['0', whole_dollar_amount_without_sep, whole_dollar_amount_with_sep],\n      whole_dollar_amount = '(' + valid_whole_dollar_amounts.join('|') + ')?',\n      decimal_amount = '(\\\\' + options.decimal_separator + '(' + decimal_digits + '))' + (options.require_decimal ? '' : '?');\n  var pattern = whole_dollar_amount + (options.allow_decimal || options.require_decimal ? decimal_amount : '');\n\n  // default is negative sign before symbol, but there are two other options (besides parens)\n  if (options.allow_negatives && !options.parens_for_negatives) {\n    if (options.negative_sign_after_digits) {\n      pattern += negative;\n    } else if (options.negative_sign_before_digits) {\n      pattern = negative + pattern;\n    }\n  }\n\n  // South African Rand, for example, uses R 123 (space) and R-123 (no space)\n  if (options.allow_negative_sign_placeholder) {\n    pattern = '( (?!\\\\-))?' + pattern;\n  } else if (options.allow_space_after_symbol) {\n    pattern = ' ?' + pattern;\n  } else if (options.allow_space_after_digits) {\n    pattern += '( (?!$))?';\n  }\n\n  if (options.symbol_after_digits) {\n    pattern += symbol;\n  } else {\n    pattern = symbol + pattern;\n  }\n\n  if (options.allow_negatives) {\n    if (options.parens_for_negatives) {\n      pattern = '(\\\\(' + pattern + '\\\\)|' + pattern + ')';\n    } else if (!(options.negative_sign_before_digits || options.negative_sign_after_digits)) {\n      pattern = negative + pattern;\n    }\n  }\n\n  // ensure there's a dollar and/or decimal amount, and that\n  // it doesn't start with a space or a negative sign followed by a space\n  return new RegExp('^(?!-? )(?=.*\\\\d)' + pattern + '$');\n}\n\nvar default_currency_options = {\n  symbol: '$',\n  require_symbol: false,\n  allow_space_after_symbol: false,\n  symbol_after_digits: false,\n  allow_negatives: true,\n  parens_for_negatives: false,\n  negative_sign_before_digits: false,\n  negative_sign_after_digits: false,\n  allow_negative_sign_placeholder: false,\n  thousands_separator: ',',\n  decimal_separator: '.',\n  allow_decimal: true,\n  require_decimal: false,\n  digits_after_decimal: [2],\n  allow_space_after_digits: false\n};\n\nfunction isCurrency(str, options) {\n  (0, _assertString2.default)(str);\n  options = (0, _merge2.default)(options, default_currency_options);\n  return currencyRegex(options).test(str);\n}\nmodule.exports = exports['default'];"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,OAAO,GAAGC,UAAU;AAE5B,IAAIC,MAAM,GAAGC,OAAO,CAAC,cAAc,CAAC;AAEpC,IAAIC,OAAO,GAAGC,sBAAsB,CAACH,MAAM,CAAC;AAE5C,IAAII,aAAa,GAAGH,OAAO,CAAC,qBAAqB,CAAC;AAElD,IAAII,cAAc,GAAGF,sBAAsB,CAACC,aAAa,CAAC;AAE1D,SAASD,sBAAsBA,CAACG,GAAG,EAAE;EAAE,OAAOA,GAAG,IAAIA,GAAG,CAACC,UAAU,GAAGD,GAAG,GAAG;IAAER,OAAO,EAAEQ;EAAI,CAAC;AAAE;AAE9F,SAASE,aAAaA,CAACC,OAAO,EAAE;EAC9B,IAAIC,cAAc,GAAG,MAAM,GAAGD,OAAO,CAACE,oBAAoB,CAAC,CAAC,CAAC,GAAG,GAAG;EACnEF,OAAO,CAACE,oBAAoB,CAACC,OAAO,CAAC,UAAUC,KAAK,EAAEC,KAAK,EAAE;IAC3D,IAAIA,KAAK,KAAK,CAAC,EAAEJ,cAAc,GAAGA,cAAc,GAAG,OAAO,GAAGG,KAAK,GAAG,GAAG;EAC1E,CAAC,CAAC;EACF,IAAIE,MAAM,GAAG,KAAK,GAAGN,OAAO,CAACM,MAAM,CAACC,OAAO,CAAC,KAAK,EAAE,KAAK,CAAC,GAAG,GAAG,IAAIP,OAAO,CAACQ,cAAc,GAAG,EAAE,GAAG,GAAG,CAAC;IACjGC,QAAQ,GAAG,IAAI;IACfC,+BAA+B,GAAG,WAAW;IAC7CC,4BAA4B,GAAG,kBAAkB,GAAGX,OAAO,CAACY,mBAAmB,GAAG,UAAU;IAC5FC,0BAA0B,GAAG,CAAC,GAAG,EAAEH,+BAA+B,EAAEC,4BAA4B,CAAC;IACjGG,mBAAmB,GAAG,GAAG,GAAGD,0BAA0B,CAACE,IAAI,CAAC,GAAG,CAAC,GAAG,IAAI;IACvEC,cAAc,GAAG,KAAK,GAAGhB,OAAO,CAACiB,iBAAiB,GAAG,GAAG,GAAGhB,cAAc,GAAG,IAAI,IAAID,OAAO,CAACkB,eAAe,GAAG,EAAE,GAAG,GAAG,CAAC;EAC3H,IAAIC,OAAO,GAAGL,mBAAmB,IAAId,OAAO,CAACoB,aAAa,IAAIpB,OAAO,CAACkB,eAAe,GAAGF,cAAc,GAAG,EAAE,CAAC;;EAE5G;EACA,IAAIhB,OAAO,CAACqB,eAAe,IAAI,CAACrB,OAAO,CAACsB,oBAAoB,EAAE;IAC5D,IAAItB,OAAO,CAACuB,0BAA0B,EAAE;MACtCJ,OAAO,IAAIV,QAAQ;IACrB,CAAC,MAAM,IAAIT,OAAO,CAACwB,2BAA2B,EAAE;MAC9CL,OAAO,GAAGV,QAAQ,GAAGU,OAAO;IAC9B;EACF;;EAEA;EACA,IAAInB,OAAO,CAACyB,+BAA+B,EAAE;IAC3CN,OAAO,GAAG,aAAa,GAAGA,OAAO;EACnC,CAAC,MAAM,IAAInB,OAAO,CAAC0B,wBAAwB,EAAE;IAC3CP,OAAO,GAAG,IAAI,GAAGA,OAAO;EAC1B,CAAC,MAAM,IAAInB,OAAO,CAAC2B,wBAAwB,EAAE;IAC3CR,OAAO,IAAI,WAAW;EACxB;EAEA,IAAInB,OAAO,CAAC4B,mBAAmB,EAAE;IAC/BT,OAAO,IAAIb,MAAM;EACnB,CAAC,MAAM;IACLa,OAAO,GAAGb,MAAM,GAAGa,OAAO;EAC5B;EAEA,IAAInB,OAAO,CAACqB,eAAe,EAAE;IAC3B,IAAIrB,OAAO,CAACsB,oBAAoB,EAAE;MAChCH,OAAO,GAAG,MAAM,GAAGA,OAAO,GAAG,MAAM,GAAGA,OAAO,GAAG,GAAG;IACrD,CAAC,MAAM,IAAI,EAAEnB,OAAO,CAACwB,2BAA2B,IAAIxB,OAAO,CAACuB,0BAA0B,CAAC,EAAE;MACvFJ,OAAO,GAAGV,QAAQ,GAAGU,OAAO;IAC9B;EACF;;EAEA;EACA;EACA,OAAO,IAAIU,MAAM,CAAC,mBAAmB,GAAGV,OAAO,GAAG,GAAG,CAAC;AACxD;AAEA,IAAIW,wBAAwB,GAAG;EAC7BxB,MAAM,EAAE,GAAG;EACXE,cAAc,EAAE,KAAK;EACrBkB,wBAAwB,EAAE,KAAK;EAC/BE,mBAAmB,EAAE,KAAK;EAC1BP,eAAe,EAAE,IAAI;EACrBC,oBAAoB,EAAE,KAAK;EAC3BE,2BAA2B,EAAE,KAAK;EAClCD,0BAA0B,EAAE,KAAK;EACjCE,+BAA+B,EAAE,KAAK;EACtCb,mBAAmB,EAAE,GAAG;EACxBK,iBAAiB,EAAE,GAAG;EACtBG,aAAa,EAAE,IAAI;EACnBF,eAAe,EAAE,KAAK;EACtBhB,oBAAoB,EAAE,CAAC,CAAC,CAAC;EACzByB,wBAAwB,EAAE;AAC5B,CAAC;AAED,SAASrC,UAAUA,CAACyC,GAAG,EAAE/B,OAAO,EAAE;EAChC,CAAC,CAAC,EAAEJ,cAAc,CAACP,OAAO,EAAE0C,GAAG,CAAC;EAChC/B,OAAO,GAAG,CAAC,CAAC,EAAEP,OAAO,CAACJ,OAAO,EAAEW,OAAO,EAAE8B,wBAAwB,CAAC;EACjE,OAAO/B,aAAa,CAACC,OAAO,CAAC,CAACgC,IAAI,CAACD,GAAG,CAAC;AACzC;AACAE,MAAM,CAAC9C,OAAO,GAAGA,OAAO,CAAC,SAAS,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}