{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isInt;\nvar _assertString = require('./util/assertString');\nvar _assertString2 = _interopRequireDefault(_assertString);\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar int = /^(?:[-+]?(?:0|[1-9][0-9]*))$/;\nvar intLeadingZeroes = /^[-+]?[0-9]+$/;\nfunction isInt(str, options) {\n  (0, _assertString2.default)(str);\n  options = options || {};\n\n  // Get the regex to use for testing, based on whether\n  // leading zeroes are allowed or not.\n  var regex = options.hasOwnProperty('allow_leading_zeroes') && !options.allow_leading_zeroes ? int : intLeadingZeroes;\n\n  // Check min/max/lt/gt\n  var minCheckPassed = !options.hasOwnProperty('min') || str >= options.min;\n  var maxCheckPassed = !options.hasOwnProperty('max') || str <= options.max;\n  var ltCheckPassed = !options.hasOwnProperty('lt') || str < options.lt;\n  var gtCheckPassed = !options.hasOwnProperty('gt') || str > options.gt;\n  return regex.test(str) && minCheckPassed && maxCheckPassed && ltCheckPassed && gtCheckPassed;\n}\nmodule.exports = exports['default'];","map":{"version":3,"names":["Object","defineProperty","exports","value","default","isInt","_assertString","require","_assertString2","_interopRequireDefault","obj","__esModule","int","intLeadingZeroes","str","options","regex","hasOwnProperty","allow_leading_zeroes","minCheckPassed","min","maxCheckPassed","max","ltCheckPassed","lt","gtCheckPassed","gt","test","module"],"sources":["D:/projects/React Projects/mern-fullstack/node_modules/validator/lib/isInt.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isInt;\n\nvar _assertString = require('./util/assertString');\n\nvar _assertString2 = _interopRequireDefault(_assertString);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar int = /^(?:[-+]?(?:0|[1-9][0-9]*))$/;\nvar intLeadingZeroes = /^[-+]?[0-9]+$/;\n\nfunction isInt(str, options) {\n  (0, _assertString2.default)(str);\n  options = options || {};\n\n  // Get the regex to use for testing, based on whether\n  // leading zeroes are allowed or not.\n  var regex = options.hasOwnProperty('allow_leading_zeroes') && !options.allow_leading_zeroes ? int : intLeadingZeroes;\n\n  // Check min/max/lt/gt\n  var minCheckPassed = !options.hasOwnProperty('min') || str >= options.min;\n  var maxCheckPassed = !options.hasOwnProperty('max') || str <= options.max;\n  var ltCheckPassed = !options.hasOwnProperty('lt') || str < options.lt;\n  var gtCheckPassed = !options.hasOwnProperty('gt') || str > options.gt;\n\n  return regex.test(str) && minCheckPassed && maxCheckPassed && ltCheckPassed && gtCheckPassed;\n}\nmodule.exports = exports['default'];"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,OAAO,GAAGC,KAAK;AAEvB,IAAIC,aAAa,GAAGC,OAAO,CAAC,qBAAqB,CAAC;AAElD,IAAIC,cAAc,GAAGC,sBAAsB,CAACH,aAAa,CAAC;AAE1D,SAASG,sBAAsBA,CAACC,GAAG,EAAE;EAAE,OAAOA,GAAG,IAAIA,GAAG,CAACC,UAAU,GAAGD,GAAG,GAAG;IAAEN,OAAO,EAAEM;EAAI,CAAC;AAAE;AAE9F,IAAIE,GAAG,GAAG,8BAA8B;AACxC,IAAIC,gBAAgB,GAAG,eAAe;AAEtC,SAASR,KAAKA,CAACS,GAAG,EAAEC,OAAO,EAAE;EAC3B,CAAC,CAAC,EAAEP,cAAc,CAACJ,OAAO,EAAEU,GAAG,CAAC;EAChCC,OAAO,GAAGA,OAAO,IAAI,CAAC,CAAC;;EAEvB;EACA;EACA,IAAIC,KAAK,GAAGD,OAAO,CAACE,cAAc,CAAC,sBAAsB,CAAC,IAAI,CAACF,OAAO,CAACG,oBAAoB,GAAGN,GAAG,GAAGC,gBAAgB;;EAEpH;EACA,IAAIM,cAAc,GAAG,CAACJ,OAAO,CAACE,cAAc,CAAC,KAAK,CAAC,IAAIH,GAAG,IAAIC,OAAO,CAACK,GAAG;EACzE,IAAIC,cAAc,GAAG,CAACN,OAAO,CAACE,cAAc,CAAC,KAAK,CAAC,IAAIH,GAAG,IAAIC,OAAO,CAACO,GAAG;EACzE,IAAIC,aAAa,GAAG,CAACR,OAAO,CAACE,cAAc,CAAC,IAAI,CAAC,IAAIH,GAAG,GAAGC,OAAO,CAACS,EAAE;EACrE,IAAIC,aAAa,GAAG,CAACV,OAAO,CAACE,cAAc,CAAC,IAAI,CAAC,IAAIH,GAAG,GAAGC,OAAO,CAACW,EAAE;EAErE,OAAOV,KAAK,CAACW,IAAI,CAACb,GAAG,CAAC,IAAIK,cAAc,IAAIE,cAAc,IAAIE,aAAa,IAAIE,aAAa;AAC9F;AACAG,MAAM,CAAC1B,OAAO,GAAGA,OAAO,CAAC,SAAS,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}